
COMANDOS DO GIT

>> Comandos mais utilizados no dia a dia para históricos e conflitos <<
git init

git add .
ou
git add <lista de arquivos>

git commit -m <comentário>

git push

git remote add origin <https://github.com/JucelioAmaral/...>

git remote -v
Para ver que pode ser fetch ou push

git push -u origin master

** cat **
cat <NomeDoArquivo>
Lê tudo que está escrito no arquivo no console do GitHub

** clear **
clear
Comando para limpar o console do GitHub

** git diff **
git diff
Exibi as alterações/diferença entre commits e branchs

git diff HEAD~1
Mostra o que foi alterado/diferença do último commit

git diff <CódigoDoCommit> <CódigoDoCommit>
Compara os dois commits comparados no diff

** git clone **
git clone <URL>
Clona o repositório já existente

** git pull **
git pull
Puxa as alterações do repositório remoto

** git checkout **
git checkout <CódigoDoCommit>
Exemplo : git checkout dd5dcbc5f0
OBS: Não precisa copiar e colar todo o código do commit, apenas o início porque será diferente dos outros.
Altera o repositório para o estado daquele commit

git checkout -- <NomeDoArquivoAlterado>          => (Retona o arquivo ao que era no último commit)
ou 
git checkout -- .                                => (Retona todos os arquivos ao que era no último commit)
Serve para desfazer as alterações que não estejam no stage desde o último commit, ou seja, ignora o que está no stage e volta ao que era no último commit.

git checkout HEAD -- <NomeDoArquivo>
Esse comando serve para desfazer o que foi feito após ter enviado o comando "git add ." sem querer ou quer desfazer/melhorar/corrigir o que está no que salvou localmente.
OBS:Dê "git status" para verificar após o Add, para verificar que foi add e novo "git status" após este comando acima para ver que retornou ao que era antes.

** git revert **
git revert <CódigoDoCommit>
Serve para reverter o commit realizado (antes de dar push). O "<CódigoDoCommit>" será o código do commit gerado no commit que deseja reverter.
Ele reseta o repositório para um determinado commit
OBS: Use o git diff (git diff <CódigoDoCommit> <CódigoDoCommit>) e também o "cat <>" para comparar as diferenças.

** git reset **
git reset HEAD~1 --hard
Apaga no repositório local o último(~1) commit feito. Usado se não foi feita a publicação, ou seja, push. Volta para o estado anterior.


** Conflitos (master|MERGING) **
Ocorre conflito quando na mesma linha houve alterações de fontes de alterações diferentes. Só executar "git pull" não resolve.
Deve-se se executar os comandos:
Dê uma "git pull" para trazer as alterações;
git status => para verificar se há divergencia;
Abra o arquivo onde há o conflito, verifique e resolva o que deve manter ou remover.
Após verificar o que manter ou remover,  faça novo "git Add .", "git commit..." e "git push" criando assim o merge.


>> Branching, Merge e Rebase <<

** git branch **
git branch
Exibirá as branchs e com um asterisco (*) na frente a branch que está atualmente.

** git branch <NomeDaBranch> **
git branch NovaBranch
Cria-se uma nova branch a partir da master
OBS1: A branch no GitHub (https://github.com/...) só passa a existir quando faz um push.
OBS2: Terá que usar o comando: 
git push --set-upstream origin <NomeDaBranch>
ou
git push -u origin <NomeDaBranch>


** git branch -d <NomeDaBranch> **
git branch -d NovaBranch
Exclui a branch.

** git checkout <NomeDaBranch> **
Muda de branch. O comando "git checkout" tbm serve para mudra de branch

git merge <branch>
Comando para aplicar os commits de uma branch na branch atual.

** git rebase <NomeDaBranch> **
Semelhante ao Merge porém é diferente na ordem de aplicar os commits
Usando esse comando, será criada linearmente os commits da branch secundária e depois inclui os commits existentes da master que existe após a clonagem.

** git fetch **
Baixa as atualizações do remote porém não aplica elas no repositório.
pull = fetch + Merge
Fetch e Rebase é melhor para manter o histórico do desenvolvimento.

** git tag **
git tag v1.0
Cria a tag baseada no último push

git push origin v1.0
Envia a tag para o repositório.

git checkout v1.0
Dá checkout na tag, podendo criar uma branch dentro dela.

** git amend **
git commit --amend
OBS1: Após este comando habilita-se para editar/inserir mais comentários.
OBS2: Funciona antes de dar push.
OBS3 IMPORTANTE: Deve-se clicar em "ctrl + c" para sair do editor e digitar ":wq" para conseguir dar o pudh logo em seguida.
Comando utilizado para inserir/editar mais informações no comentário do commit. Serve também para adicionar arquivos.

---------------------
Adicionar colaborador no repositório:

Ir na aba Settings;
Do lado esquerdo, em Access, clique em Collaborators;
Adicione uma pessoa ("Add people") com o nome que é encontrado no GitHub.
